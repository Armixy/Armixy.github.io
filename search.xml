<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[CPPCNN]]></title>
      <url>http://jin-qin.github.io/2020/08/10/cppcnn/</url>
      <content type="html"><![CDATA[<span class="label label-info">GitHub</span>
<p><a href="https://github.com/jin-qin/cppcnn" target="_blank" rel="noopener">Source codes</a></p>
<p>A tiny framework of convolutional nerual networks with C++ implementation. You can add arbitrary number of convolutional layers, max pooling layers and hidden layers to construct your own convolutional neural networks.</p>
<p>This framework contains a sub neural network framework which is multi-layer neural network, you can also use it as CNNs to construct your own multi-layer neural netowrk.</p>
<p>This project also implemented <code>Momentum SGD</code> and <code>Adam Optimizer</code> in Multi-layer Neural Networks part and can be enabled by functions.</p>
<a id="more"></a>
<h1 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h1><blockquote>
<p><code>mkdir build &amp;&amp; cd build</code><br><code>cmake ..</code><br><code>make</code> on macOS OR <code>open solution</code> if you are using windows</p>
</blockquote>
<p>Tested on Windows or macOS, but should also work on linux systems.</p>
<h1 id="Test-and-verification"><a href="#Test-and-verification" class="headerlink" title="Test and verification"></a>Test and verification</h1><p>This tiny frame work has been tested on MNIST(handwritten digits) dataset by LeCun.</p>
<ol>
<li>make sure there are 4 files named <code>train-images.idx3-ubyte</code> <code>train-labels.idx1-ubyte</code> <code>t10k-images.idx3-ubyte</code> <code>t10k-labels.idx1-ubyte</code> in the <code>data/mnist</code> path. Dataset can be downloaded from <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">here</a>.</li>
<li>after build, if you are on macOS, run <code>./cppcnn</code> in <code>build</code> folder, then it will load MNIST dataset and after 1-3 hours on CPU, it will give the test results.</li>
</ol>
<h2 id="Performance-of-Multi-layer-Neural-Networks"><a href="#Performance-of-Multi-layer-Neural-Networks" class="headerlink" title="Performance of Multi-layer Neural Networks"></a>Performance of Multi-layer Neural Networks</h2><p>Get 95% accuracy by 5 epoch, with hyperparameters:</p>
<ul>
<li>learning rate: 1.0</li>
<li>hidden layers: one hidden layer with 256 units</li>
<li>mini batch size: 256</li>
<li>momentum SGD: disabled</li>
<li>adam optimizer: disabled</li>
</ul>
<h2 id="Performance-of-Convolutional-Neural-Networks"><a href="#Performance-of-Convolutional-Neural-Networks" class="headerlink" title="Performance of Convolutional Neural Networks"></a>Performance of Convolutional Neural Networks</h2><p>Get 98% accuracy by 3 epoch, with hyperparameters:</p>
<ul>
<li>learning rate: 0.005</li>
<li>convolution layers: one convolution layer with <code>8 convolution filters</code>, <code>size 3</code>, <code>stride 1</code>, <code>no padding</code></li>
<li>pooling layers: one max pooling layer with <code>size 2</code>, <code>stride 2</code></li>
<li>hidden layers: two hidden layer with 32 and 16 units</li>
<li>mini batch size: 1</li>
<li>momentum SGD: disabled</li>
<li>adam optimizer: disabled</li>
</ul>
<h1 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO DO"></a>TO DO</h1><ul>
<li>Fix pooling layer bug for odd case.</li>
<li>Implement <code>Momentum SGD</code> and <code>Adam Optimizer</code> in CNN class.</li>
<li>Provide average pooling layer.</li>
<li>Provide GPU acceleration.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Machine Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[QML Borderless Window]]></title>
      <url>http://jin-qin.github.io/2020/08/10/QML-Borderless-Window/</url>
      <content type="html"><![CDATA[<span class="label label-info">GitHub</span>
<p><a href="https://github.com/jin-qin/qml-native-borderless-window" target="_blank" rel="noopener">Source codes</a></p>
<p>The default frameless window style of Qt will lose the native animation and window shadow in Windows system. This is due to it does not use <a href="https://docs.microsoft.com/en-us/windows/win32/api/_dwm/" target="_blank" rel="noopener">Desktop Window Manager (DWM)</a> APIs to enable borderless effect.</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="/data/images/native-borderlesswindow-demo.gif" alt="demo"></p>
<a id="more"></a>
<h2 id="How-to-enable-borderless-window-with-native-animation-and-shadow"><a href="#How-to-enable-borderless-window-with-native-animation-and-shadow" class="headerlink" title="How to enable borderless window with native animation and shadow"></a>How to enable borderless window with native animation and shadow</h2><blockquote>
<p>Here is a helper function <a href="https://github.com/jin-qin/qml-native-borderless-window/blob/03530089a81986f02d0b40559d587e48ca054a71/src/util/util_misc_win.cpp#L16" target="_blank" rel="noopener">enableWindowBorderlessWin</a> that can be used to enable native shadow for a window:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enableWindowBorderlessWin</span><span class="params">(qulonglong wId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HWND wnd = (HWND)wId;</span><br><span class="line">    <span class="comment">// enable borderless and keep aero effects.</span></span><br><span class="line">    SetWindowLongPtr(wnd, GWL_STYLE, <span class="keyword">static_cast</span>&lt;LONG&gt;(Style::aero_borderless));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enable shadow</span></span><br><span class="line">    <span class="keyword">const</span> MARGINS shadow_on = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line">    DwmExtendFrameIntoClientArea(wnd, &amp;shadow_on);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//redraw frame</span></span><br><span class="line">    SetWindowPos(wnd, Q_NULLPTR, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, SWP_FRAMECHANGED | SWP_NOMOVE | SWP_NOSIZE);</span><br><span class="line">    ShowWindow(wnd, SW_SHOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="How-to-setup-window-caption-area-and-keep-window-border-events"><a href="#How-to-setup-window-caption-area-and-keep-window-border-events" class="headerlink" title="How to setup window caption area and keep window border events"></a>How to setup window caption area and keep window border events</h2><p>After we applying the helper function above, the window will lose its caption area and the window border events, we can set them by hooking the Windows native messages.</p>
<blockquote>
<p>Here is <a href="https://github.com/jin-qin/qml-native-borderless-window/blob/03530089a81986f02d0b40559d587e48ca054a71/src/util/native_event_filter.cpp#L13" target="_blank" rel="noopener">nativeEventFilter</a> to handle these issues:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NativeEventFilter::nativeEventFilter</span><span class="params">(<span class="keyword">const</span> QByteArray &amp;eventType, <span class="keyword">void</span> *message, <span class="keyword">long</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_OS_WIN</span></span><br><span class="line">    <span class="keyword">if</span> (eventType == <span class="string">"windows_generic_MSG"</span>) &#123;</span><br><span class="line">        MSG* msg = <span class="keyword">static_cast</span>&lt;MSG *&gt;(message);</span><br><span class="line">        <span class="keyword">if</span> (msg == Q_NULLPTR)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(msg-&gt;message) &#123;</span><br><span class="line">        <span class="keyword">case</span> WM_COMMAND: &#123;</span><br><span class="line">          SendMessage(msg-&gt;hwnd, WM_SYSCOMMAND, msg-&gt;wParam, msg-&gt;lParam);</span><br><span class="line">          *result = DefWindowProc(msg-&gt;hwnd, msg-&gt;message, msg-&gt;wParam, msg-&gt;lParam);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> WM_NCCALCSIZE:&#123;</span><br><span class="line">            NCCALCSIZE_PARAMS&amp; params = *<span class="keyword">reinterpret_cast</span>&lt;NCCALCSIZE_PARAMS*&gt;(msg-&gt;lParam);</span><br><span class="line">            <span class="keyword">if</span> (params.rgrc[<span class="number">0</span>].top != <span class="number">0</span>)</span><br><span class="line">                params.rgrc[<span class="number">0</span>].top -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//this kills the window frame and title bar we added with WS_THICKFRAME and WS_CAPTION</span></span><br><span class="line">            *result = WVR_REDRAW;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> WM_NCHITTEST: &#123;</span><br><span class="line">            <span class="keyword">const</span> LONG borderWidth = <span class="number">8</span>; <span class="comment">//in pixels</span></span><br><span class="line">            RECT winrect;</span><br><span class="line">            GetWindowRect(msg-&gt;hwnd, &amp;winrect);</span><br><span class="line">            <span class="keyword">long</span> x = GET_X_LPARAM(msg-&gt;lParam);</span><br><span class="line">            <span class="keyword">long</span> y = GET_Y_LPARAM(msg-&gt;lParam);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// caption, a.k.a. title bar</span></span><br><span class="line">            <span class="keyword">auto</span> wndScaleFactor = qgetenv(<span class="string">"QT_SCALE_FACTOR"</span>).toDouble();</span><br><span class="line">            <span class="keyword">int</span> titleBarHeight = m_wndsParams[(WId)msg-&gt;hwnd][<span class="string">"TitleHeight"</span>].toInt();</span><br><span class="line">            titleBarHeight = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(titleBarHeight * wndScaleFactor);</span><br><span class="line">            <span class="keyword">int</span> titleBarBtnsWidth = m_wndsParams[(WId)msg-&gt;hwnd][<span class="string">"TitleBarButtonsArea"</span>].toSize().width();</span><br><span class="line">            titleBarBtnsWidth = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(titleBarBtnsWidth * wndScaleFactor);</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= winrect.left &amp;&amp; x &lt; winrect.right - titleBarBtnsWidth &amp;&amp;</span><br><span class="line">                    y &gt; winrect.top + borderWidth &amp;&amp; y &lt; winrect.top + titleBarHeight) &#123;</span><br><span class="line">                *result = HTCAPTION;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//bottom left corner</span></span><br><span class="line">            <span class="keyword">if</span> (x &gt;= winrect.left &amp;&amp; x &lt; winrect.left + borderWidth &amp;&amp;</span><br><span class="line">                y &lt; winrect.bottom &amp;&amp; y &gt;= winrect.bottom - borderWidth) &#123;</span><br><span class="line">                *result = HTBOTTOMLEFT;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//bottom right corner</span></span><br><span class="line">            <span class="keyword">if</span> (x &lt; winrect.right &amp;&amp; x &gt;= winrect.right - borderWidth &amp;&amp;</span><br><span class="line">                y &lt; winrect.bottom &amp;&amp; y &gt;= winrect.bottom - borderWidth) &#123;</span><br><span class="line">                *result = HTBOTTOMRIGHT;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//top left corner</span></span><br><span class="line">            <span class="keyword">if</span> (x &gt;= winrect.left &amp;&amp; x &lt; winrect.left + borderWidth &amp;&amp;</span><br><span class="line">                y &gt;= winrect.top &amp;&amp; y &lt; winrect.top + borderWidth) &#123;</span><br><span class="line">                *result = HTTOPLEFT;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//top right corner</span></span><br><span class="line">            <span class="keyword">if</span> (x &lt; winrect.right &amp;&amp; x &gt;= winrect.right - borderWidth &amp;&amp;</span><br><span class="line">                y &gt;= winrect.top &amp;&amp; y &lt; winrect.top + borderWidth) &#123;</span><br><span class="line">                *result = HTTOPRIGHT;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//left border</span></span><br><span class="line">            <span class="keyword">if</span> (x &gt;= winrect.left &amp;&amp; x &lt; winrect.left + borderWidth) &#123;</span><br><span class="line">                *result = HTLEFT;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//right border</span></span><br><span class="line">            <span class="keyword">if</span> (x &lt; winrect.right &amp;&amp; x &gt;= winrect.right - borderWidth) &#123;</span><br><span class="line">                *result = HTRIGHT;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//bottom border</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt; winrect.bottom &amp;&amp; y &gt;= winrect.bottom - borderWidth) &#123;</span><br><span class="line">                *result = HTBOTTOM;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//top border</span></span><br><span class="line">            <span class="keyword">if</span> (y &gt;= winrect.top &amp;&amp; y &lt; winrect.top + borderWidth) &#123;</span><br><span class="line">                *result = HTTOP;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Qt </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Qt </tag>
            
            <tag> QML </tag>
            
            <tag> C++ </tag>
            
            <tag> Windows </tag>
            
            <tag> GUI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CUDA7.5+CUDNNv4+Caffe+Ubuntu16.04 Issues Collection]]></title>
      <url>http://jin-qin.github.io/2016/06/11/CUDA7-5-CUDNNv4-Caffe-Ubuntu16-04-%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>There are so many issues when I tried <code>Caffe+CUDA7.5+CUDNNv4+Ubuntu16.04</code>, put them here in case of need.</p>
<p>First, should use <code>Python2.7</code> rather than <code>Python3.5</code>!!!</p>
<a id="more"></a>
<blockquote>
<p>To fix shared libraries error (normally it is <code>symbolic link</code> issue):</p>
</blockquote>
<ul>
<li>“while loading shared libraries: libcudart.so.7.5: cannot open shared object”<ul>
<li><code>sudo ldconfig /usr/local/cuda/lib64</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>To fix libhdf5 error:</p>
</blockquote>
<ul>
<li><code>sudo apt-get install --reinstall libhdf5-10</code></li>
<li><code>sudo apt-get install –reinstall libhdf5-dev</code></li>
<li><code>sudo apt-get install –reinstall libhdf5-serial-dev</code></li>
<li>Add /usr/lib/x86_64-linux-gnu/hdf5/serial/ to INCLUDE_LIBRARIES</li>
</ul>
<blockquote>
<p>To fix opencv, liblzma etc errors:</p>
</blockquote>
<ul>
<li>Check LD_LIBRARY_PATH, if it contains anaconda3/lib then do:</li>
<li>Set LD_LIBRARY_PATH=”/usr/lib/x86_65-linux-gnu/“</li>
</ul>
<blockquote>
<p>To fix g++ compile bugs:</p>
</blockquote>
<ul>
<li>“/usr/include/string.h: In function ‘void<em> __mempcpy_inline(void</em>, const void*, size_t)’”: <ul>
<li>If compile with Makefile，then open Makfile，change <code>NVCCFLAGS += -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)</code> to <code>NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS)</code>.</li>
</ul>
</li>
</ul>
<blockquote>
<p>To fix python2.7 error:</p>
</blockquote>
<ul>
<li>“python/caffe/_caffe.cpp:11:31: fatal error: numpy/arrayobject.h: No such file or directory”<ul>
<li>Solution:<br><code>vim Makefile.config</code><br>Find: PYTHON_INCLUDE<br>Add: change “/usr/lib/python2.7/dist-packages/numpy/core/include” to “/usr/local/python2.7/dist-packages/numpy/core/include”</li>
</ul>
</li>
</ul>
<blockquote>
<p>If matplotlib.pyplt() does not work:</p>
</blockquote>
<ul>
<li><code>sudo apt-get install python-qt4</code><br>Change backend=PyQt4, and uncomment the backend=backend.pyqt4</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Machine Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Caffe </tag>
            
            <tag> Ubuntu 16.04 </tag>
            
            <tag> CUDA7.5 </tag>
            
            <tag> CUDNNv4 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
